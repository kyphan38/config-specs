AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a VPC and subnets with IPv6 auto-assign enabled."

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: a4l-vpc1

  # IPv6
  VPCIpv6CIDR:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

    # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: a4l-vpc1-igw

  # Attach VPC to IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: a4l-vpc1-rt-web

  # Add subnets to route table
  SubnetRouteAssociationWebA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetWebA

  SubnetRouteAssociationWebB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetWebB

  SubnetRouteAssociationWebC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetWebC

  # Route to Internet Gateway (IPv4)
  RouteDefaultIpv4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route for IPv6 Traffic
  RouteDefaultIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: a4l-keypair
      Tags:
        - Key: Name
          Value: a4l-keypair
  # SG
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: A4L-BASTION-SG
      GroupDescription: A4L-BASTION-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: A4L-BASTION-SG

  # EC2
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0022f774911c1d690"
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      VpcId: !Ref VPC
      SubnetId: !Ref SubnetWebA
      SecurityGroupIds:
      - !Ref SecurityGroup
      Tags: 
        - Key: Name 
          Value: A4L-BASTION

  # Subnet
  SubnetReservedA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.0.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-reserved-A

  SubnetDbA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.16.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-db-A

  SubnetAppA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.32.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 2
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-app-A

  SubnetWebA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.48.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 3
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-web-A

  SubnetReservedB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.64.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 4
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-reserved-B

  SubnetDbB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.80.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 5
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-db-B

  SubnetAppB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.96.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 6
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-app-B

  SubnetWebB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.112.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 7
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-web-B

  SubnetReservedC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.128.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 8
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-reserved-C

  SubnetDbC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.144.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 9
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-db-C

  SubnetAppC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.160.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 10
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-app-C

  SubnetWebC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.16.176.0/20
      Ipv6CidrBlock:
        Fn::Select:
          - 11
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - VPC
                      - Ipv6CidrBlocks
              - 12
              - 64
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: sn-web-C
  
Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC

  SubnetIds:
    Description: "Subnet IDs"
    Value: !Join [",", [!Ref SubnetReservedA, !Ref SubnetDbA, !Ref SubnetAppA, !Ref SubnetWebA, !Ref SubnetReservedB, !Ref SubnetDbB, !Ref SubnetAppB, !Ref SubnetWebB, !Ref SubnetReservedC, !Ref SubnetDbC, !Ref SubnetAppC, !Ref SubnetWebC]]
