pipeline {
  agent any

  parameters {
    stashedFile(name: 'JSONData')
    activeChoiceHtml  (
      name: 'SECRET_PATH',
      description: 'Path of secret',
      choiceType: 'ET_FORMATTED_HTML',
      referencedParameters: 'ACTION',
      omitValueField: true,
      script: [
        $class: 'GroovyScript',
        script: [
          classpath: [],
          sandbox: true,
          script:
          '''
            return "<input name=\\"value\\" value=\\"\\" class=\\"setting-input\\" type=\\"text\\">" 
          '''
        ],
        fallbackScript: [
          classpath: [],
          sandbox: true,
          script:
            'return "error"'
        ]
      ]
    )
  }

  stages {
    stage('Prepare') {
      steps {
        script {
          String secretPath = params.SECRET_PATH.trim()

          if (secretPath.isEmpty()) {
            echo "Condition 1"
            error "The path an not empty"
          } 
          
          if (!(secretPath.startsWith('ms') || secretPath.startsWith('miniapp') || secretPath.startsWith('ib'))) {
            echo "Condition 2"
            error "The path must contain 'ms' or 'miniapp or ib'."
          }

          if (secretPath.startsWith('ms') || secretPath.startsWith('miniapp')) {
            echo "Condition 3"
            secretPath = "ib/${secretPath}"
          }
          
          if (!(secretPath.substring(3).startsWith('ms-') || secretPath.substring(3).startsWith('miniapp-'))) {
            echo "Condition 4"
            error "The path must start with 'ms-', 'miniapp-', or 'ib-'."
          }
          echo "Secret path is: ${secretPath}"
        }
      }
    }
    // stage('Build') {
    //   steps {
    //     script {
    //       echo "Display ${params.JSONData}"

    //       sh '''
    //         pwd
    //         ls -lah
    //         env
    //       '''

    //       // if(env.JSONData_FILENAME) {
    //       if (env.JSONData_FILENAME) {
    //         echo "Environment variable JSONData_FILENAME found. Unstashing the file..."
    //         unstash "JSONData"

    //         sh '''
    //           pwd
    //           ls -lah
    //           cat JSONData
    //           env
    //         '''
    //       } else {
    //         echo "Sorry"
    //         sh '''
    //           pwd
    //           ls -lah
    //           env
    //         '''
    //       }
    //     }
    //   }
    // }

    // stage('Test') {
    //   steps {
    //     sh """
    //       pwd
    //       ls -lah
    //     """
    //   }

    // }
  }
  post {
    always {
      script {
        cleanWs()
      }
    }
  }
}

// Option 1

      // activeChoice(
    //   name: 'States',
    //   description: 'Select a state option',
    //   choiceType: 'PT_SINGLE_SELECT',
    //   script: [
    //     $class: 'GroovyScript',
    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return ["A_State", "B_State"]'
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return ["Error for States"]'
    //     ]
    //   ]
    // )

    // choice (
    //   name: 'ACTION',
    //   choices: ['get', 'put'],
    //   description: 'Select a action'
    // )

    // // Display
    // activeChoiceHtml (
    //   name: 'SECRET_KEY',
    //   description: 'Key of secret',
    //   choiceType: 'ET_FORMATTED_HTML',
    //   referencedParameters: 'ACTION', 
    //   omitValueField: true,
    //   script: [
    //     $class: 'GroovyScript',a=$(docker run --cap-add=IPC_LOCK --rm --name=vault-container -d hashicorp/vault && docker logs vault-container | grep -m 1 'Root Token:' | awk '{print $NF} echo $a; docker stop vault-container

    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //       '''
    //         if (ACTION == "put") {
    //           return "<input name=\\"value\\" value=\\"\\" class=\\"setting-input\\" type=\\"text\\">" 
    //         } else {
    //           return ""
    //         }
    //       '''
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return "error"'
    //     ]
    //   ]
    // )

    // activeChoiceHtml  (
    //   name: 'SECRET_VALUE',
    //   description: 'Value of secret',
    //   choiceType: 'ET_FORMATTED_HTML',
    //   referencedParameters: 'ACTION',
    //   omitValueField: true,
    //   script: [
    //     $class: 'GroovyScript',
    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //       '''
    //         if (ACTION == "put") {
    //           return "<input name=\\"value\\" value=\\"\\" class=\\"setting-input\\" type=\\"text\\">" 
    //         } else {
    //           return ""
    //         }
    //       '''
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return "error"'
    //     ]
    //   ]
    // )

    // activeChoiceHtml  (
    //   name: 'SECRET_PATH',
    //   description: 'Path of secret',
    //   choiceType: 'ET_FORMATTED_HTML',
    //   referencedParameters: 'ACTION',
    //   omitValueField: true,
    //   script: [
    //     $class: 'GroovyScript',
    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //       '''
    //         if (ACTION == "get") {
    //           return "<input name=\\"value\\" value=\\"\\" class=\\"setting-input\\" type=\\"text\\">" 
    //         } else {
    //           return ""
    //         }
    //       '''
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return "error"'
    //     ]
    //   ]
    // )


    // Option 2
    // choice (
    //   name: 'States',
    //   choices: ["A_State", "B_State"],
    //   description: 'Select a state option'
    // )

    // activeChoiceHtml(
    //   name: 'Cities',
    //   description: 'Select a city option',
    //   choiceType: 'ET_FORMATTED_HTML',
    //   referencedParameters: 'States', 
    //   script: [
    //     $class: 'GroovyScript',
    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:  // equals or == accepted
    //       '''
    //         if (States.equals("A_State")) {
    //           return "<input name='Cities_A' value='N/A' class='setting-input' type='text'>"
    //         }
    //         else if (States.equals("B_State")) {
    //           return "<input name='Cities_B' value='N/A' class='setting-input' type='text'>"
    //         }
    //       '''
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return "<p>error</p>"'
    //     ]
    //   ]
    // )

    // reactiveChoice(
    //   name: 'Cities',
    //   description: 'Select a city option',
    //   choiceType: 'PT_SINGLE_SELECT',
    //   referencedParameters: 'States', 
    //   script: [
    //     $class: 'GroovyScript',
    //     script: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         '''
    //           if (States.equals("A_State")) {
    //             return ["A_Cities1","A_Cities2","A_Cities3","A_Cities4","A_Cities5","A_Cities6"]
    //           }
    //           else if (States.equals("B_State")) {
    //             return ["B_Cities1","B_Cities2","B_Cities3","B_Cities4"]
    //           }
    //         '''
    //     ],
    //     fallbackScript: [
    //       classpath: [],
    //       sandbox: true,
    //       script:
    //         'return ["Error for Cities"]'
    //     ]
    //   ]
    // )
