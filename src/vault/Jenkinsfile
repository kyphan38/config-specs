pipeline {
  agent any

  parameters {

    // Work
    activeChoice(
      name: 'States',
      description: 'Select a state option',
      choiceType: 'PT_SINGLE_SELECT',
      script: [
        $class: 'GroovyScript',
        script: [
          classpath: [],
          sandbox: false,
          script:
            'return ["A_State", "B_State", "C_State"]'
        ],
        fallbackScript: [
          classpath: [],
          sandbox: false,
          script:
            'return ["Error for States"]'
        ]
      ]
    )
    
    reactiveChoice(
      name: 'Cities',
      description: 'Select a city option',
      choiceType: 'PT_SINGLE_SELECT',
      referencedParameters: 'States', 
      script: [
        $class: 'GroovyScript',
        script: [
          classpath: [],
          sandbox: false,
          script:
            '''
              if (States.equals("A_State")) {
                return ["A_Cities1","A_Cities2","A_Cities3","A_Cities4","A_Cities5","A_Cities6"]
              }
              else if (States.equals("B_State")) {
                return ["B_Cities1","B_Cities2","B_Cities3","B_Cities4"]
            '''
        ],
        fallbackScript: [
          classpath: [],
          sandbox: false,
          script:
            'return ["Error for Cities"]'
        ]
      ]
    )
  }

  stages {
    stage('Build') {
      steps {
        echo "Showing ${params.States}"
        echo "Showing ${params.Cities}"
      }
    }
  }
}